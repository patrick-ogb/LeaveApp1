@using LeaveApp.ViewModel
@using LeaveApp.ReportModel

@model HoldApplicationVM
@{
    ViewData["Title"] = "Index";
}

<h2>LeaveApp Table</h2>
@* 
<ul class="nav nav-tabs">
    <li role="presentation" class="@(Model.ActiveTab == Tab.Employee ? "active" : string.Empty ) custom_button"><a asp-route-tabname="Employee" asp-action="SwitchToTabs">Employee</a></li>
    <li role="presentation" class="@(Model.ActiveTab == Tab.Department ? "active" : string.Empty ) custom_button"><a asp-route-tabname="Department" asp-action="SwitchToTabs">Department</a></li>
    <li role="presentation" class="@(Model.ActiveTab == Tab.Level ? "active" : string.Empty ) custom_button"><a asp-route-tabname="Level" asp-action="SwitchToTabs">Level</a></li>
</ul> 
 *@




<ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="pills-home-tab" data-toggle="pill" data-target="#pills-home" type="button" role="tab" aria-controls="pills-home" aria-selected="true">Employee</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="pills-profile-tab" data-toggle="pill" data-target="#pills-profile" type="button" role="tab" aria-controls="pills-profile" aria-selected="false">Department</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="pills-contact-tab" data-toggle="pill" data-target="#pills-contact" type="button" role="tab" aria-controls="pills-contact" aria-selected="false">Level</button>
    </li>
</ul> 



<div class="tab-content" id="pills-tabContent">
   @*  <div class="tab-pane fade show active" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab">
        @await Component.InvokeAsync("Employee")
    </div> *@
    <div class="tab-pane fade" id="pills-profile" role="tabpanel" aria-labelledby="pills-profile-tab">
        @if (Model.holdDepartmentVM != null)
        {
            HoldDepartmentVM holdDptVM = Model.holdDepartmentVM;
            @await Component.InvokeAsync("Department", new { departments = holdDptVM})
            ;
        }
    </div>
    <div class="tab-pane fade" id="pills-contact" role="tabpanel" aria-labelledby="pills-contact-tab">
        @if(Model.holdLevelVM != null)
        {
            HoldLevelVM holdLvlVM = Model.holdLevelVM;
            @await Component.InvokeAsync("Level", new { levels = holdLvlVM })
            ;
        }
    </div>
</div>


@* 
@switch (Model.ActiveTab)
{
    case Tab.Employee:
        @await Component.InvokeAsync("Employee")
        ;
        break;
    case Tab.Department:
        @await Component.InvokeAsync("Department")
        ;
        break;
    case Tab.Level:
        @await Component.InvokeAsync("Level")
        ;
        break;
    default:
        break;
}
 *@






@*
<div class="card">
    <h5 class="card-header">Employee List</h5>
    <div class="card-body">
        @await Component.InvokeAsync("Employee");
    </div>
</div>

<br/>

<div class="card">
    <h5 class="card-header">Employee List</h5>
    <div class="card-body">
        @await Component.InvokeAsync("Department");
    </div>
</div>
<br/>

<div class="card">
    <h5 class="card-header">Employee List</h5>
    <div class="card-body">
        @await Component.InvokeAsync("Level");
    </div>
</div>
 *@